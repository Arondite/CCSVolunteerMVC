@using CCSVolunteerMVC.Models;
@model CCSVolunteerMVC.ViewModels.VolunteerPositionViewModel

@{
	ViewBag.Title = "Details";
	///This is the View that displays the volunteers information that will allow them to clock in/out and submit which
	///position they held for the volunteer work
	List<SelectListItem> selectListItem = new List<SelectListItem>();
	var appLocation = App.Location;
	foreach (var item in Model.Positions)
	{
		selectListItem.Add(new SelectListItem()
		{
			Text = item.PositionTitle,
			Value = item.PositionID.ToString()
		});
	}
	var position = Request["Positions"];
	int locationId = 0;
	
	if (IsPost)
	{
		int positionId = 0;
		if (App.TimeInTimeOut == "In" && int.TryParse(position, out positionId) && int.TryParse(appLocation, out locationId))
		{
			User tempUser = new User(Model.Volunteer.Volunteer.ElementAt(0).volunteerID, 1, positionId, 3, "", locationId);
			CurrentUsers.AddUser(tempUser);
			if (Model.Volunteer.Volunteer.ElementAt(0).volsCourtOrdered == 1)
			{
				Response.Redirect(string.Format("~/MessageScreens/CourtOrderedScreen/{0}", Model.Volunteer.Volunteer.ElementAt(0).volunteerID));
			}
			else
			{
				Response.Redirect(string.Format("~/MessageScreens/CompleteSignIn/{0}", Model.Volunteer.Volunteer.ElementAt(0).volunteerID));
			}
		}
		else
		{
			int tempCheck = CurrentUsers.Users.Where(u => u.UserId == Model.Volunteer.Volunteer.ElementAt(0).volunteerID).Count();
			if (tempCheck > 0)
			{
				CurrentUsers.UpdateVolunteerTimeOut(Model.Volunteer.Volunteer.ElementAt(0).volunteerID, "");
				Response.Redirect(string.Format("~/MessageScreens/CompleteSignOut/{0}", Model.Volunteer.Volunteer.ElementAt(0).volunteerID));
			}
			else
			{
				Response.Redirect("~/MessageScreens/NoRecords");
			}
		}
	}
}

<h2 class="jumbotron text-center">Volunteer</h2>

<div>
	<hr />
	<dl class="dl-horizontal">
		<dt>
			@Html.DisplayNameFor(model => model.Volunteer.Volunteer.ElementAt(0).volFirstName)
		</dt>

		<dd>
			@Html.DisplayFor(model => model.Volunteer.Volunteer.ElementAt(0).volFirstName)
		</dd>

		<dt>
			@Html.DisplayNameFor(model => model.Volunteer.Volunteer.ElementAt(0).volLastName)
		</dt>

		<dd>
			@Html.DisplayFor(model => model.Volunteer.Volunteer.ElementAt(0).volLastName)
		</dd>
	</dl>
	<div class="container col-sm-offset-2">
		<form action="" method="post">
			<div class="col-md-10 container">
				@if (App.TimeInTimeOut == "In")
				{
					<div class="form-group">
						@Html.LabelFor(model => model.Positions, htmlAttributes: new { @class = "control-label col-sm-10" })
						<div class="col-md-10">
							<div class="row">
								@Html.DropDownListFor(model => model.Positions, selectListItem, htmlAttributes: new { @class = "btn btn-default dropdown-toggle" })
								@Html.ValidationMessageFor(model => model.Positions, "", new { @class = "text-danger" })
							</div>
						</div>
					</div>
				}
				<div>
					<input class="btn btn-primary" name="SignIn" type="submit" id="SignIn" formmethod="POST" title="Submit" value="Submit">
				</div>
			</div>
		</form>
	</div>
</div>